{
  "queries":{
     "-1":{
        "sql":"WITH pairs AS (\n    SELECT p.user_id liked, pa.user_id liker\n    FROM post_actions pa\n    LEFT JOIN posts p ON p.id = pa.post_id\n    WHERE post_action_type_id = 2\n)\nSELECT liker liker_user_id, liked liked_user_id, count(*)\nFROM pairs\nGROUP BY liked, liker\nORDER BY count DESC",
        "name":"Most Common Likers",
        "description":"Which users like particular other users the most?"
     },
     "-2":{
        "sql":"SELECT user_id, count(*) AS message_count\n FROM topics\n WHERE archetype = 'private_message' AND subtype = 'user_to_user'\n AND age(created_at) < interval '7 days'\n GROUP BY user_id\n ORDER BY message_count DESC",
        "name":"Who has been sending the most messages in the last week?",
        "description":"tracking down suspicious PM activity"
     },
     "-3":{
        "sql":"SELECT\n p.id AS post_id,\n topic_id\n FROM posts p\n JOIN users u\n ON u.id = p.user_id\n JOIN topics t\n ON t.id = p.topic_id\n WHERE p.last_editor_id = p.user_id\n AND p.self_edits > 0\n AND (u.trust_level = 0 OR u.trust_level = 1)\n AND p.deleted_at IS NULL\n AND t.deleted_at IS NULL\n AND t.archetype = 'regular'\n ORDER BY p.updated_at DESC\n LIMIT 500",
        "name":"Last 500 posts that were edited by TL0/TL1 users",
        "description":"fighting human-driven copy-paste spam"
     },
     "-4":{
        "sql":"-- [params]\n -- int :months_ago = 1\n \n WITH query_period as (\n SELECT\n date_trunc('month', CURRENT_DATE) - INTERVAL ':months_ago months' as period_start,\n date_trunc('month', CURRENT_DATE) - INTERVAL ':months_ago months' + INTERVAL '1 month' - INTERVAL '1 second' as period_end\n )\n \n SELECT\n t.id as topic_id,\n t.category_id\n FROM topics t\n RIGHT JOIN query_period qp\n ON t.created_at >= qp.period_start\n AND t.created_at <= qp.period_end\n WHERE t.user_id > 0\n AND t.category_id IS NOT NULL\n ORDER BY t.category_id, t.created_at DESC",
        "name":"New Topics by Category",
        "description":"Lists all new topics ordered by category and creation_date. The query accepts a ‘months_ago’ parameter. It defaults to 0 to give you the stats for the current month."
     },
     "-5":{
        "sql":"-- [params]\n -- int :months_ago = 1\n \n WITH query_period AS (\n SELECT\n date_trunc('month', CURRENT_DATE) - INTERVAL ':months_ago months' as period_start,\n date_trunc('month', CURRENT_DATE) - INTERVAL ':months_ago months' + INTERVAL '1 month' - INTERVAL '1 second' as period_end\n )\n \n SELECT\n ua.user_id,\n count(1) AS like_count\n FROM user_actions ua\n INNER JOIN query_period qp\n ON ua.created_at >= qp.period_start\n AND ua.created_at <= qp.period_end\n WHERE ua.action_type = 1\n GROUP BY ua.user_id\n ORDER BY like_count DESC\n LIMIT 100",
        "name":"Top 100 Active Topics",
        "description":"based on the number of replies, it accepts a ‘months_ago’ parameter, defaults to 1 to give results for the last calendar month."
     },
     "-6":{
        "sql":"-- [params]\n -- int :months_ago = 1\n \n WITH query_period AS (\n SELECT\n date_trunc('month', CURRENT_DATE) - INTERVAL ':months_ago months' as period_start,\n date_trunc('month', CURRENT_DATE) - INTERVAL ':months_ago months' + INTERVAL '1 month' - INTERVAL '1 second' as period_end\n )\n \n SELECT\n ua.user_id,\n count(1) AS like_count\n FROM user_actions ua\n INNER JOIN query_period qp\n ON ua.created_at >= qp.period_start\n AND ua.created_at <= qp.period_end\n WHERE ua.action_type = 1\n GROUP BY ua.user_id\n ORDER BY like_count DESC\n LIMIT 100",
        "name":"Top 100 Likers",
        "description":"returns the top 100 likers for a given monthly period ordered by like_count. It accepts a ‘months_ago’ parameter, defaults to 1 to give results for the last calendar month."
     },
     "-7":{
        "sql":"SELECT \n sum(p.score) / count(p) as \"average score per post\", \n count(p.id) as post_count, \n p.user_id\n FROM posts p\n JOIN users u ON u.id = p.user_id\n WHERE p.created_at >= CURRENT_DATE - INTERVAL '6 month'\n AND NOT u.admin\n AND u.active\n GROUP by user_id, u.views\n HAVING count(p.id) > 50\n ORDER BY sum(p.score) / count(p) DESC\n LIMIT 20",
        "name":"Top 50 Quality Users",
        "description":"based on post score calculated using reply count, likes, incoming links, bookmarks, time spent and read count."
     },
     "-8":{
        "sql":"-- [params]\n-- int :from_days_ago = 0\n-- int :duration_days = 30\n\nwith\nt as (\n  select \n    CURRENT_TIMESTAMP - ((:from_days_ago + :duration_days) * (INTERVAL '1 days')) as start,\n    CURRENT_TIMESTAMP - (:from_days_ago * (INTERVAL '1 days')) as end\n),\npr as (\n    select user_id, \n        count(1) as visits,\n        sum(posts_read) as posts_read\n    from user_visits, t\n    where posts_read > 0\n    and visited_at > t.start\n    and visited_at < t.end\n    group by user_id\n),\npc as (\n  select user_id, \n      count(1) as posts_created\n  from posts, t\n  where created_at > t.start\n  and created_at < t.end\n  group by user_id\n),\nttopics as (\n select user_id, posts_count\n  from topics, t\n  where created_at > t.start\n  and created_at < t.end\n),\ntc as (\n  select user_id, \n      count(1) as topics_created\n  from ttopics\n  group by user_id\n),\ntwr as (\n  select user_id, \n      count(1) as topics_with_replies\n  from ttopics\n  where posts_count > 1\n  group by user_id\n),\ntv as (\n select user_id, \n        count(distinct(topic_id)) as topics_viewed\n  from topic_views, t\n  where viewed_at > t.start\n  and viewed_at < t.end\n  group by user_id\n),\nlikes as (\n  select \n      post_actions.user_id as given_by_user_id, \n      posts.user_id as received_by_user_id\n  from t, post_actions\n  left join posts\n  on post_actions.post_id = posts.id\n  where post_actions.created_at > t.start\n  and post_actions.created_at < t.end\n  and post_action_type_id = 2\n\n),\nlg as (\n  select given_by_user_id as user_id, \n      count(1) as likes_given\n  from likes\n  group by user_id\n),\nlr as (\n  select received_by_user_id as user_id, \n        count(1) as likes_received\n    from likes\n    group by user_id\n  ),\n  e as (\n    select email, user_id\n    from user_emails u\n    where u.primary = true\n  )\n  select pr.user_id,\n         username,\n         name,\n         email,\n         visits, \n         coalesce(topics_viewed,0) as topics_viewed,\n         coalesce(posts_read,0) as posts_read, \n         coalesce(posts_created,0) as posts_created,\n         coalesce(topics_created,0) as topics_created,\n         coalesce(topics_with_replies,0) as topics_with_replies,\n         coalesce(likes_given,0) as likes_given,\n         coalesce(likes_received,0) as likes_received\n  from pr\n  left join tv using (user_id)\n  left join pc using (user_id)\n  left join tc using (user_id)\n  left join twr using (user_id)\n  left join lg using (user_id)\n  left join lr using (user_id)\n  left join e using (user_id)\n  left join users on pr.user_id = users.id\n  order by \n    visits desc, \n    posts_read desc, \n    posts_created desc",
        "name":"User Participation Statistics",
        "description":"Detailed statistics for the most active users"
     }
  }
}
